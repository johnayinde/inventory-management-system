// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BusinessType {
  PERSONAL
  PARTNERSHIP
}

enum StatusType {
  online
  offline
}

enum PricingType {
  bulk
  individual
}

enum ExpenseType {
  product
  general
  shipment
}

enum ValueType {
  fixed
  percentage
}

enum FeeType {
  all
  product
}

enum ProductStatusType {
  in_stock
  running_low
  sold_out
}

enum NotifierType {
  low_stock
  sold_out
  top_selling
}

model Auth {
  id             Int       @id @default(autoincrement())
  first_name     String?
  last_name      String?
  email          String    @unique
  phone_number   String?   @unique
  password       String?
  mfa_secret     String?
  is_mfa         Boolean   @default(false)
  isOauthUser    Boolean   @default(false)
  isUser         Boolean   @default(false)
  //
  deleted        Boolean   @default(false)
  email_verified Boolean?  @default(false)
  created_at     DateTime  @default(now()) @db.Timestamptz(3)
  updated_at     DateTime? @updatedAt

  @@index(fields: [email])
}

model Tenant {
  id                 Int               @id @default(autoincrement())
  email              String?
  business           Business?
  category           Category[]
  users              User[]
  products           Product[]
  expense_categories ExpenseCategory[]
  expenses           Expense[]

  low_stock_notifier   Boolean @default(false)
  sold_out_notifier    Boolean @default(false)
  top_selling_notifier Boolean @default(false)

  //
  deleted          Boolean        @default(false)
  created_at       DateTime       @default(now()) @db.Timestamptz(3)
  updated_at       DateTime?      @updatedAt
  inventory        Inventory[]
  customers        Customer[]
  sales            Sale[]
  saleProducts     SaleProduct[]
  fees             Fees[]
  shipments        Shipment[]
  Product_notifier Notification[]

  @@index(fields: [id, email])
}

model Business {
  id               Int           @id @default(autoincrement())
  tenant           Tenant        @relation(fields: [tenant_id], references: [id])
  tenant_id        Int           @unique
  business_name    String?
  business_type    BusinessType?
  business_address String?
  country          String?

  //
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt
}

model Category {
  id             Int           @id @default(autoincrement())
  tenant         Tenant        @relation(fields: [tenant_id], references: [id])
  tenant_id      Int
  name           String
  description    String?
  sub_categories Subcategory[]
  products       Product[]

  //
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt
}

model Subcategory {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  category_id Int
  category    Category @relation(fields: [category_id], references: [id])

  //
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt
  Product    Product[]
}

model User {
  id           Int        @id @default(autoincrement())
  name         String
  email        String
  last_login   DateTime?  @default(now())
  status       StatusType @default(offline)
  is_suspended Boolean    @default(false)
  is_revoked   Boolean    @default(false)

  tenant_id  Int
  tenant     Tenant      @relation(fields: [tenant_id], references: [id])
  permission Permission?

  //
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt
}

model Permission {
  id Int @id @default(autoincrement())

  dashboard Boolean @default(false)
  inventory Boolean @default(false)
  sales     Boolean @default(false)
  expenses  Boolean @default(false)
  report    Boolean @default(false)
  customers Boolean @default(false)
  tenant_id Int
  userId    Int     @unique
  user_id   User    @relation(fields: [userId], references: [id])

  //
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt

  @@index(fields: [id])
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  category        Category          @relation(fields: [category_id], references: [id])
  category_id     Int
  sub_category    Subcategory?      @relation(fields: [sub_category_id], references: [id])
  sub_category_id Int?
  attachments     String[]
  tenant_id       Int
  tenant          Tenant            @relation(fields: [tenant_id], references: [id])
  expenses        Expense[]
  fees            Fees[]
  status          ProductStatusType @default(sold_out)
  threshold       Int               @default(0)
  prices          String?

  //
  deleted    Boolean     @default(false)
  created_at DateTime    @default(now()) @db.Timestamptz(3)
  updated_at DateTime?   @updatedAt
  shipment   Shipment[]
  inventory  Inventory[]

  @@index(fields: [id, tenant_id, status, threshold, prices])
}

model ExpenseCategory {
  id          Int     @id @default(autoincrement())
  tenant      Tenant  @relation(fields: [tenant_id], references: [id])
  tenant_id   Int
  name        String
  description String?

  //
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt
  expenses   Expense[]

  @@map("expense_category")
}

model Expense {
  id                 Int              @id @default(autoincrement())
  tenant             Tenant           @relation(fields: [tenant_id], references: [id])
  tenant_id          Int
  name               String
  description        String?
  amount             Float?
  date               DateTime
  type               ExpenseType      @default(general)
  attachments        String[]
  expense_categoryId Int?
  category           ExpenseCategory? @relation(fields: [expense_categoryId], references: [id])
  product            Product?         @relation(fields: [productId], references: [id])
  productId          Int?

  //
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt
  shipment   Shipment? @relation(fields: [shipmentId], references: [id])
  shipmentId Int?
}

model Inventory {
  id            Int     @id @default(autoincrement())
  note          String?
  prod_id       String
  serial_number String?

  name          String?
  attachments   String[]
  pricing_type  PricingType @default(individual)
  selling_price Float       @default(0)
  cost_price    Float       @default(0)
  tenant        Tenant      @relation(fields: [tenant_id], references: [id])
  product       Product     @relation(fields: [product_id], references: [id])
  shipment      Shipment    @relation(fields: [shipment_id], references: [id])
  quantity      Int?        @default(0)

  //
  tenant_id    Int
  product_id   Int
  shipment_id  Int
  deleted      Boolean       @default(false)
  created_at   DateTime      @default(now()) @db.Timestamptz(3)
  updated_at   DateTime?     @updatedAt
  sale_product SaleProduct[]

  @@index(fields: [id, tenant_id, product_id, shipment_id])
}

model Customer {
  id           Int    @id @default(autoincrement())
  name         String
  phone_number String
  email        String
  address      String

  tenant_id Int
  tenant    Tenant @relation(fields: [tenant_id], references: [id])

  //
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt
  sales      Sale[]

  @@index(fields: [id, tenant_id])
}

model Sale {
  id             Int           @id @default(autoincrement())
  quantity       Int
  expenses       Float
  total_price    Float
  sales_products SaleProduct[]

  tenant_id  Int
  tenant     Tenant   @relation(fields: [tenant_id], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  //
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt

  @@index(fields: [id, tenant_id])
  @@map("sales")
}

model SaleProduct {
  id              Int   @id @default(autoincrement())
  saleId          Int
  inventory_id    Int
  quantity        Int
  expense         Float
  unit_price      Float
  total_price     Float
  returned_counts Int   @default(0)
  damaged_counts  Int   @default(0)

  sale           Sale      @relation(fields: [saleId], references: [id])
  inventory_item Inventory @relation(fields: [inventory_id], references: [id])
  tenant_id      Int
  tenant         Tenant    @relation(fields: [tenant_id], references: [id])

  //
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt

  @@index(fields: [id, tenant_id, saleId, inventory_id])
  @@map("sales_product")
}

model Fees {
  id         Int       @id @default(autoincrement())
  name       String
  value      Float
  value_type ValueType @default(fixed)
  fee_type   FeeType   @default(all)
  products   Product[]

  tenant_id Int
  tenant    Tenant @relation(fields: [tenant_id], references: [id])

  //
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt
}

model Shipment {
  id            Int       @id @default(autoincrement())
  shipping_name String
  reference     String?
  date          DateTime
  attachments   String[]
  price         Float?
  note          String?
  products      Product[]
  expenses      Expense[]

  tenant_id Int
  tenant    Tenant @relation(fields: [tenant_id], references: [id])

  //
  deleted         Boolean     @default(false)
  is_in_inventory Boolean     @default(false)
  created_at      DateTime    @default(now()) @db.Timestamptz(3)
  updated_at      DateTime?   @updatedAt
  inventory       Inventory[]

  @@index(fields: [id, tenant_id])
}

model Notification {
  id       Int          @id @default(autoincrement())
  type     NotifierType @default(low_stock)
  products Json

  tenant_id Int
  tenant    Tenant @relation(fields: [tenant_id], references: [id])

  //
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt

  @@index(fields: [id, tenant_id])
}
